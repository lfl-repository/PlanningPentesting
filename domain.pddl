(define (domain pentesting_domain)
  (:requirements :typing :fluents)
  (:types 
    application
    state
    sql_injection
    xss 
  )

  (:predicates
    (state ?s - state)
    (state_connection ?s1 ?s2 - state)
    (obtained_authentication ?aut - application)
    (run_crawler ?aut - application)
    (run_scanner ?aut - application)
    (run_exploitation ?aut - application)
    (has_authentication ?aut - application)
    (sql_injection_testing ?v - sql_injection)
    (xss_testing ?v - xss)	      
  )

  (:functions (priority))

  ;Atc1
  (:action authentication_info_wapiti
    :parameters   (?aut - application)
    :precondition (and (not(run_crawler ?aut))
                       (not(run_scanner ?aut))
                       (not(run_exploitation ?aut))
                       (has_authentication ?aut))
   
    :effect       (and (obtained_authentication ?aut))	
  ) 

  ;Crw1
  (:action crawler_htcap_without_authentication
    :parameters   (?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (not(run_crawler ?aut))
                       (not(run_scanner ?aut))
                       (not(run_exploitation ?aut))
                       (not(has_authentication ?aut)))
   
    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_crawler ?aut))
  ) 

  ;Crw2
  (:action crawler_htcap_with_authentication
    :parameters   (?aut - application
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (not(run_crawler ?aut))
                       (not(run_scanner ?aut))
                       (not(run_exploitation ?aut))
                       (has_authentication ?aut)
                       (obtained_authentication ?aut))
   
    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_crawler ?aut))
  ) 

  ;Scn1
  (:action scan_skipfish_without_authentication
    :parameters   (?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (not(run_scanner ?aut))
                       (not(run_exploitation ?aut))
                       (not(has_authentication ?aut)))
   
    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_scanner ?aut)
                       (increase (priority) 3))
  ) 
 
  ;Scn2
  (:action scan_arachni_without_authentication
    :parameters   (?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (not(run_scanner ?aut))
                       (not(run_exploitation ?aut))
                       (not(has_authentication ?aut)))
			
    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_scanner ?aut)
                       (increase (priority) 2))
  ) 

  ;Scn3
  (:action scan_zap_without_authentication
    :parameters   (?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (not(run_scanner ?aut))
                       (not(run_exploitation ?aut))
                       (not(has_authentication ?aut)))
   
    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_scanner ?aut)
                       (increase (priority) 1))  
  )  

  ;Scn4
  (:action scan_skipfish_with_authentication
    :parameters   (?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (not(run_scanner ?aut))
                       (not(run_exploitation ?aut))
                       (has_authentication ?aut)
                       (obtained_authentication ?aut))            
   
    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_scanner ?aut)
                       (increase (priority) 3))
  ) 

  ;Scn5
  (:action scan_arachni_with_authentication
    :parameters   (?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (not(run_scanner ?aut))
                       (not(run_exploitation ?aut))
   	                   (has_authentication ?aut)
                       (obtained_authentication ?aut))            
   
    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_scanner ?aut)
                       (increase (priority) 2))
  ) 

  ;Scn6
  (:action scan_zap_with_authentication
    :parameters   (?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (not(run_scanner ?aut))
                       (not(run_exploitation ?aut))
   	                   (has_authentication ?aut)
                       (obtained_authentication ?aut))            
   
    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_scanner ?aut)
                       (increase (priority) 1))
  ) 
  
  ;Exp1
  (:action exploitation_sqlmap_without_authentication
    :parameters   (?v - injecao_sql ?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (run_scanner ?aut)
                       (not(run_exploitation ?aut))
                       (not(has_authentication ?aut))
                       (teste_injecao_sql ?v))

    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_exploitation ?aut))
  ) 

  ;Exp2
  (:action exploitation_xsser_without_authentication
    :parameters   (?v - xss ?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (run_scanner ?aut)
                       (not(run_exploitation ?aut))
                       (not(has_authentication ?aut))
                       (teste_xss ?v))

    :effect       (and (state ?next)
                       (not(state ?current))
                       (run_exploitation ?aut))
  ) 

  ;Exp3
  (:action exploitation_sqlmap_with_authentication
    :parameters   (?v - injecao_sql ?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (run_scanner ?aut)
                       (not(run_exploitation ?aut))
                       (has_authentication ?aut)
                       (obtained_authentication ?aut)
                       (teste_injecao_sql ?v))

    :effect       (and (state ?next)
                       (not(state ?current))                      
                       (run_exploitation ?aut))
  ) 

  ;Exp4
  (:action exploitation_xsser_with_authentication
    :parameters   (?v - xss ?aut - application 
                   ?current - state ?next - state)
    :precondition (and (state ?current)
                       (state_connection ?current ?next)
                       (run_crawler ?aut)
                       (run_scanner ?aut)
                       (not(run_exploitation ?aut))
                       (has_authentication ?aut)
                       (obtained_authentication ?aut)
                       (teste_xss ?v))

    :effect       (and (state ?next)
                       (not(state ?current))                      
                       (run_exploitation ?aut))
  ) 
)
