SQLI in URL: http://testesseg.xxxx.xxxx.br:3004/phpmyadmin/setup/index.php?page=*
        ___
       __H__
 ___ ___[']_____ ___ ___  {1.4.2.13#dev}
|_ -| . ["]     | .'| . |
|___|_  [']_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 15:12:31 /2020-02-05/

custom injection marker ('*') found in option '-u'. Do you want to process it? [Y/n/q] Y
[15:12:31] [WARNING] it seems that you've provided empty parameter value(s) for testing. Please, always use only valid parameter values so sqlmap could be able to run properly
[15:12:31] [INFO] testing connection to the target URL
you have not declared cookie(s), while server wants to set its own ('phpMyAdmin=05olhk7io9g...qj8bm9i449;pma_lang=en'). Do you want to use those [Y/n] Y
[15:12:31] [INFO] testing if the target URL content is stable
[15:12:31] [WARNING] target URL content is not stable (i.e. content differs). sqlmap will base the page comparison on a sequence matcher. If no dynamic nor injectable parameters are detected, or in case of junk results, refer to user's manual paragraph 'Page comparison'
how do you want to proceed? [(C)ontinue/(s)tring/(r)egex/(q)uit] C
[15:12:31] [INFO] testing if URI parameter '#1*' is dynamic
[15:12:32] [WARNING] URI parameter '#1*' does not appear to be dynamic
[15:12:32] [WARNING] heuristic (basic) test shows that URI parameter '#1*' might not be injectable
[15:12:32] [INFO] testing for SQL injection on URI parameter '#1*'
[15:12:32] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[15:12:32] [WARNING] reflective value(s) found and filtering out
[15:12:33] [INFO] URI parameter '#1*' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable 
[15:12:33] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'Altibase' 
it looks like the back-end DBMS is 'Altibase'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y
[15:12:33] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[15:12:33] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[15:12:34] [INFO] testing 'Generic UNION query (random number) - 1 to 20 columns'
[15:12:34] [INFO] target URL appears to be UNION injectable with 1 columns
[15:12:34] [WARNING] if UNION based SQL injection is not detected, please consider and/or try to force the back-end DBMS (e.g. '--dbms=mysql') 
[15:12:34] [INFO] testing 'Generic UNION query (NULL) - 21 to 40 columns'
injection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] Y
[15:12:41] [WARNING] if UNION based SQL injection is not detected, please consider forcing the back-end DBMS (e.g. '--dbms=mysql') 
[15:12:41] [INFO] testing 'Generic UNION query (32) - 41 to 60 columns'
[15:12:50] [INFO] testing 'Generic UNION query (32) - 61 to 80 columns'
[15:12:50] [INFO] testing 'Generic UNION query (32) - 81 to 100 columns'
[15:12:51] [INFO] checking if the injection point on URI parameter '#1*' is a false positive
[15:12:51] [WARNING] false positive or unexploitable injection point detected
[15:12:51] [WARNING] URI parameter '#1*' does not seem to be injectable
[15:12:51] [CRITICAL] all tested parameters do not appear to be injectable. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent'

[*] ending @ 15:12:51 /2020-02-05/

SQLI in URL: http://testesseg.xxxx.xxxx.br:3004/phpmyadmin/setup/index.php?page=*
        ___
       __H__
 ___ ___[']_____ ___ ___  {1.4.2.13#dev}
|_ -| . [.]     | .'| . |
|___|_  ["]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 15:13:07 /2020-02-05/

custom injection marker ('*') found in option '-u'. Do you want to process it? [Y/n/q] Y
[15:13:07] [WARNING] it seems that you've provided empty parameter value(s) for testing. Please, always use only valid parameter values so sqlmap could be able to run properly
[15:13:07] [INFO] testing connection to the target URL
you have not declared cookie(s), while server wants to set its own ('phpMyAdmin=1bd2m2fbhoa...rlsfbllb5a;pma_lang=en'). Do you want to use those [Y/n] Y
[15:13:07] [INFO] testing if the target URL content is stable
[15:13:08] [WARNING] target URL content is not stable (i.e. content differs). sqlmap will base the page comparison on a sequence matcher. If no dynamic nor injectable parameters are detected, or in case of junk results, refer to user's manual paragraph 'Page comparison'
how do you want to proceed? [(C)ontinue/(s)tring/(r)egex/(q)uit] C
[15:13:08] [INFO] testing if URI parameter '#1*' is dynamic
[15:13:08] [WARNING] URI parameter '#1*' does not appear to be dynamic
[15:13:08] [WARNING] heuristic (basic) test shows that URI parameter '#1*' might not be injectable
[15:13:08] [INFO] testing for SQL injection on URI parameter '#1*'
[15:13:08] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[15:13:08] [WARNING] reflective value(s) found and filtering out
[15:13:10] [INFO] URI parameter '#1*' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable 
[15:13:10] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'Altibase' 
it looks like the back-end DBMS is 'Altibase'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y
[15:13:10] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[15:13:10] [INFO] testing 'Generic UNION query (random number) - 1 to 20 columns'
[15:13:10] [INFO] testing 'Generic UNION query (NULL) - 21 to 40 columns'
[15:13:10] [INFO] testing 'Generic UNION query (random number) - 21 to 40 columns'
[15:13:10] [INFO] testing 'Generic UNION query (NULL) - 41 to 60 columns'
[15:13:10] [INFO] testing 'Generic UNION query (random number) - 41 to 60 columns'
[15:13:10] [INFO] testing 'Generic UNION query (NULL) - 61 to 80 columns'
[15:13:10] [INFO] testing 'Generic UNION query (random number) - 61 to 80 columns'
[15:13:10] [INFO] testing 'Generic UNION query (NULL) - 81 to 100 columns'
[15:13:10] [INFO] testing 'Generic UNION query (random number) - 81 to 100 columns'
[15:13:10] [INFO] checking if the injection point on URI parameter '#1*' is a false positive
[15:13:10] [WARNING] false positive or unexploitable injection point detected
[15:13:10] [WARNING] URI parameter '#1*' does not seem to be injectable
[15:13:10] [CRITICAL] all tested parameters do not appear to be injectable. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent'

[*] ending @ 15:13:10 /2020-02-05/
